import asyncio
import os
import io
import requests
from PIL import Image
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
import json
import time
import urllib.parse
import random
# --- Config ---
MAX_IMAGES = 100
SCROLL_PAUSE = 2.0
DOWNLOAD_DELAY = 0.5
BATCH_SIZE = 5  # Process 5 foods before restarting browser
MAX_RETRIES = 3  # Retry failed items
PAGE_LOAD_TIMEOUT = 30

def load_food_data():
    try:
        with open('food_ranking_list_usa.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print("ERROR: food_ranking_list_usa.json not found!")
        return []
    except json.JSONDecodeError:
        print("ERROR: Invalid JSON format in food_ranking_list_usa.json")
        return []


def ask_start_index(food_data):
    if not food_data:
        return 0
    while True:
        try:
            start_index = int(input(f"Enter start index (0 to {len(food_data)-1}): "))
            if 0 <= start_index < len(food_data):
                return start_index
            else:
                print(f"Invalid input. Please enter a number between 0 and {len(food_data)-1}")
        except ValueError:
            print("Please enter a valid integer.")

def download_image(download_path, url, file_name):
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        resp = requests.get(url, timeout=15, headers=headers, stream=True)
        resp.raise_for_status()
        
        if 'image' not in resp.headers.get('content-type', '').lower():
            print(f"SKIPPED {file_name}: Not an image")
            return False
            
        image_file = io.BytesIO(resp.content)
        image = Image.open(image_file).convert("RGB")
        
        os.makedirs(download_path, exist_ok=True)
        file_path = os.path.join(download_path, file_name)
        
        image.save(file_path, "JPEG", quality=85)
        print(f"✓ Downloaded: {file_name}")
        return True
        
    except Exception as e:
        print(f"✗ Failed to download {url}: {e}")
        return False
def create_driver():
    """Create a new Chrome WebDriver instance with optimized settings"""
    try:
        chrome_options = Options()
        
        # Performance optimizations
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--disable-software-rasterizer')
        chrome_options.add_argument('--disable-background-timer-throttling')
        chrome_options.add_argument('--disable-backgrounding-occluded-windows')
        chrome_options.add_argument('--disable-renderer-backgrounding')
        chrome_options.add_argument('--disable-features=TranslateUI')
        chrome_options.add_argument('--disable-ipc-flooding-protection')
        
        # Memory optimizations
        chrome_options.add_argument('--memory-pressure-off')
        chrome_options.add_argument('--max_old_space_size=4096')
        
        # Disable unnecessary features
        chrome_options.add_argument('--disable-extensions')
        chrome_options.add_argument('--disable-plugins')
        chrome_options.add_argument('--disable-images')  # We'll enable images specifically for our search
        chrome_options.add_argument('--disable-javascript')  # Most image loading doesn't need JS
